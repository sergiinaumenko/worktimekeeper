/*
 * This file is generated by jOOQ.
 */
package ua.worktimekeeper.model.dayoff.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.worktimekeeper.model.dayoff.Indexes;
import ua.worktimekeeper.model.dayoff.Keys;
import ua.worktimekeeper.model.dayoff.Public;
import ua.worktimekeeper.model.dayoff.tables.records.RequestRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Request extends TableImpl<RequestRecord> {

    private static final long serialVersionUID = 1567651962;

    /**
     * The reference instance of <code>public.request</code>
     */
    public static final Request REQUEST = new Request();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestRecord> getRecordType() {
        return RequestRecord.class;
    }

    /**
     * The column <code>public.request.r_id</code>.
     */
    public final TableField<RequestRecord, Long> R_ID = createField(DSL.name("r_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.request.r_user_id</code>.
     */
    public final TableField<RequestRecord, Long> R_USER_ID = createField(DSL.name("r_user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.request.r_status</code>.
     */
    public final TableField<RequestRecord, String> R_STATUS = createField(DSL.name("r_status"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.request.r_start_date</code>.
     */
    public final TableField<RequestRecord, Timestamp> R_START_DATE = createField(DSL.name("r_start_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.request.r_end_date</code>.
     */
    public final TableField<RequestRecord, Timestamp> R_END_DATE = createField(DSL.name("r_end_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.request.r_type_id</code>.
     */
    public final TableField<RequestRecord, Long> R_TYPE_ID = createField(DSL.name("r_type_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.request</code> table reference
     */
    public Request() {
        this(DSL.name("request"), null);
    }

    /**
     * Create an aliased <code>public.request</code> table reference
     */
    public Request(String alias) {
        this(DSL.name(alias), REQUEST);
    }

    /**
     * Create an aliased <code>public.request</code> table reference
     */
    public Request(Name alias) {
        this(alias, REQUEST);
    }

    private Request(Name alias, Table<RequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Request(Name alias, Table<RequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Request(Table<O> child, ForeignKey<O, RequestRecord> key) {
        super(child, key, REQUEST);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REQUEST_PK);
    }

    @Override
    public UniqueKey<RequestRecord> getPrimaryKey() {
        return Keys.REQUEST_PK;
    }

    @Override
    public List<UniqueKey<RequestRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestRecord>>asList(Keys.REQUEST_PK);
    }

    @Override
    public List<ForeignKey<RequestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RequestRecord, ?>>asList(Keys.REQUEST__REQUEST_FK);
    }

    public RequestType requestType() {
        return new RequestType(this, Keys.REQUEST__REQUEST_FK);
    }

    @Override
    public Request as(String alias) {
        return new Request(DSL.name(alias), this);
    }

    @Override
    public Request as(Name alias) {
        return new Request(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(String name) {
        return new Request(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(Name name) {
        return new Request(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Timestamp, Timestamp, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
