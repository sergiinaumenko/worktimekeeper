/*
 * This file is generated by jOOQ.
 */
package ua.worktimekeeper.model.dayoff.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.worktimekeeper.model.dayoff.Indexes;
import ua.worktimekeeper.model.dayoff.Keys;
import ua.worktimekeeper.model.dayoff.Public;
import ua.worktimekeeper.model.dayoff.tables.records.RequestTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequestType extends TableImpl<RequestTypeRecord> {

    private static final long serialVersionUID = -2066535574;

    /**
     * The reference instance of <code>public.request_type</code>
     */
    public static final RequestType REQUEST_TYPE = new RequestType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestTypeRecord> getRecordType() {
        return RequestTypeRecord.class;
    }

    /**
     * The column <code>public.request_type.rt_id</code>.
     */
    public final TableField<RequestTypeRecord, Long> RT_ID = createField(DSL.name("rt_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.request_type.rt_type</code>.
     */
    public final TableField<RequestTypeRecord, String> RT_TYPE = createField(DSL.name("rt_type"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.request_type.rt_description</code>.
     */
    public final TableField<RequestTypeRecord, String> RT_DESCRIPTION = createField(DSL.name("rt_description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.request_type</code> table reference
     */
    public RequestType() {
        this(DSL.name("request_type"), null);
    }

    /**
     * Create an aliased <code>public.request_type</code> table reference
     */
    public RequestType(String alias) {
        this(DSL.name(alias), REQUEST_TYPE);
    }

    /**
     * Create an aliased <code>public.request_type</code> table reference
     */
    public RequestType(Name alias) {
        this(alias, REQUEST_TYPE);
    }

    private RequestType(Name alias, Table<RequestTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RequestType(Name alias, Table<RequestTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RequestType(Table<O> child, ForeignKey<O, RequestTypeRecord> key) {
        super(child, key, REQUEST_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REQUEST_TYPE_PK);
    }

    @Override
    public UniqueKey<RequestTypeRecord> getPrimaryKey() {
        return Keys.REQUEST_TYPE_PK;
    }

    @Override
    public List<UniqueKey<RequestTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestTypeRecord>>asList(Keys.REQUEST_TYPE_PK);
    }

    @Override
    public RequestType as(String alias) {
        return new RequestType(DSL.name(alias), this);
    }

    @Override
    public RequestType as(Name alias) {
        return new RequestType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestType rename(String name) {
        return new RequestType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequestType rename(Name name) {
        return new RequestType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
