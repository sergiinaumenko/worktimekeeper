/*
 * This file is generated by jOOQ.
 */
package ua.worktimekeeper.model.dayoff.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ua.worktimekeeper.model.dayoff.Indexes;
import ua.worktimekeeper.model.dayoff.Keys;
import ua.worktimekeeper.model.dayoff.Public;
import ua.worktimekeeper.model.dayoff.tables.records.UserDetailsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDetails extends TableImpl<UserDetailsRecord> {

    private static final long serialVersionUID = -1557756404;

    /**
     * The reference instance of <code>public.user_details</code>
     */
    public static final UserDetails USER_DETAILS = new UserDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDetailsRecord> getRecordType() {
        return UserDetailsRecord.class;
    }

    /**
     * The column <code>public.user_details.user_id</code>.
     */
    public final TableField<UserDetailsRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_details.user_name</code>.
     */
    public final TableField<UserDetailsRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>public.user_details.user_email</code>.
     */
    public final TableField<UserDetailsRecord, String> USER_EMAIL = createField(DSL.name("user_email"), org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>public.user_details.user_role</code>.
     */
    public final TableField<UserDetailsRecord, String> USER_ROLE = createField(DSL.name("user_role"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.user_details.user_working_day_duration</code>.
     */
    public final TableField<UserDetailsRecord, Long> USER_WORKING_DAY_DURATION = createField(DSL.name("user_working_day_duration"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_details.user_start_date</code>.
     */
    public final TableField<UserDetailsRecord, Date> USER_START_DATE = createField(DSL.name("user_start_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>public.user_details</code> table reference
     */
    public UserDetails() {
        this(DSL.name("user_details"), null);
    }

    /**
     * Create an aliased <code>public.user_details</code> table reference
     */
    public UserDetails(String alias) {
        this(DSL.name(alias), USER_DETAILS);
    }

    /**
     * Create an aliased <code>public.user_details</code> table reference
     */
    public UserDetails(Name alias) {
        this(alias, USER_DETAILS);
    }

    private UserDetails(Name alias, Table<UserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDetails(Name alias, Table<UserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserDetails(Table<O> child, ForeignKey<O, UserDetailsRecord> key) {
        super(child, key, USER_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_DETAILS_PK);
    }

    @Override
    public UniqueKey<UserDetailsRecord> getPrimaryKey() {
        return Keys.USER_DETAILS_PK;
    }

    @Override
    public List<UniqueKey<UserDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserDetailsRecord>>asList(Keys.USER_DETAILS_PK);
    }

    @Override
    public UserDetails as(String alias) {
        return new UserDetails(DSL.name(alias), this);
    }

    @Override
    public UserDetails as(Name alias) {
        return new UserDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetails rename(String name) {
        return new UserDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetails rename(Name name) {
        return new UserDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, Long, Date> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
